// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}
enum ProjectStatus {
  COMPLETED
  ONGOING
  INACTIVE
}

enum GoalPeriod {
  MONTHLY
  YEARLY
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  EXPIRED
}

model User {
  id            String     @id @default(cuid())
  email         String?    @unique
  firstName     String?
  name     String?
  lastName      String?
  phone         String?
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole   @default(USER)
  status        UserStatus @default(ACTIVE)
  accounts      Account[]
  donations     Donation[] // Relation to track user donations
  goals         Goal[]     // Add this line
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Project {
  id              String     @id @default(cuid())
  title           String?
  about           String?
  partner         String?
  category        String?
  image           String?
  goal            Int      @default(0)
  amountPerImpact Int?
  status        ProjectStatus @default(ONGOING)
  achievedGoal    Decimal?        @default(0)
  createdAt       DateTime   @default(now())
  donations       Donation[] // Relation to track project donations
}

model Donation {
  id        String   @id @default(cuid())
  amount    Decimal?
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  userId    String
  projectId String
  impact     Decimal?
  fimpact    Decimal?      
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([projectId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Goal {
  id          String     @id @default(cuid())
  userId      String
  targetLives Int
  achievedLives Decimal      @default(0)
  period      GoalPeriod @default(MONTHLY)
  status      GoalStatus @default(ACTIVE)
  startDate   DateTime   @default(now())
  endDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  
  @@unique([email, token])
}
